@use "sass:color";
@use "sass:map";
@use "sass:list";


$baseFontSizes: (
  mobile: 8px,
  tablet: 9px,
  desktop: 10px,
);
$breakpoints: (
    mobile: 640px,
    tablet: 960px,
    desktop: 1152px,
);
$pageMargin: (
  mobile: 0 4rem,
  tablet: 0 5rem,
  desktop: 0 8rem
);
$h2fontSizes: (
  mobile: 6rem,
  tablet: 6.6rem,
  desktop: 7.2rem,
);


/** ––– Responsive property mixin –––––––––––––––––––––––––––––––––– */
// Talkes a quoted css property and a map of values and sets the value of the property at each breakpoint
@mixin responsive-property($property, $map) {
  @each $breakpoint, $value in $map {
    @if map.has-key($breakpoints, $breakpoint) {
      $media-query: map.get($breakpoints, $breakpoint);
      $index: list.index(map.keys($breakpoints), $breakpoint);

      // Only calculate $prev-query if $index > 1
      $prev-query: if($index > 1, list.nth(map.values($breakpoints), $index - 1), null);

      // Only calculate $next-query if $index is not the last in the list
      $next-query: if($index < list.length(map.keys($breakpoints)), list.nth(map.values($breakpoints), $index + 1), null);

      @if $prev-query and $next-query {
        @media screen and (min-width: #{$prev-query + 1}) and (max-width: #{$media-query}) {
          #{$property}: #{$value};
        }
      } @else if $next-query {
        @media screen and (max-width: #{$media-query}) {
          #{$property}: #{$value};
        }
      } @else if $prev-query {
        @media screen and (min-width: #{$prev-query + 1}) {
          #{$property}: #{$value};
        }
      }
    } @else {
      @warn "Breakpoint `#{$breakpoint}` not found in `$breakpoints` map.";
    }
  }
}
 /** –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– */


/** ––– Colors ––––––––––––––––––––––––––––––––––––––––––––––––––––– */
$limeGreen: #a6fc52;
$vueGreen: #41b883;
$vividOrange: #fd5b37;
$darkGrey: #1f1f25;
$deepBlack: #060002;
/* $medGrey: #282630; */
$medGrey: oklch(27.5% 0.0185 294.32);
$lightGrey: #b8b8b8;
$washedGrey: #efe7e7;

$mainBkgColor: $darkGrey;
$boxBkgColor: $medGrey;
$accentcolor: $vueGreen;
$vividColor: $vividOrange;
/** –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– */


/** ––– Fonts –––––––––––––––––––––––––––––––––––––––––––––––––––––– */
@mixin BodoniModa($weight: 400, $style: normal) {
   @if ($style !=normal and $style !=italic) {
      @error "Invalid style value: #{$style}. It must be either 'normal' or 'italic'.";
   }

   font-family: "Bodoni Moda", serif;
   font-optical-sizing: auto;
   font-weight: $weight;
   font-style: $style;
}
 
@mixin Barlow($weight: 400, $style: normal) {
   @if ($style !=normal and $style !=italic) {
      @error "Invalid style value: #{$style}. It must be either 'normal' or 'italic'.";
   }     

   font-family: "Barlow", sans-serif;
   font-weight: $weight;
   font-style: $style;
}
/** –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– */


/** ––– Parameters ––––––––––––––––––––––––––––––––––––––––––––––––– */
$standardMargin: 1.6rem;
$standardMargin-X2: calc($standardMargin * 2);
$standardMargin-X3: calc($standardMargin * 3);
$standardMargin-X4: calc($standardMargin * 4);
/** –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– */



.atom {
  $colors: ($vividOrange, $limeGreen, $vueGreen, cyan);

	position: relative;
	width: 200px;
	height: 200px;

  &--center {
    width: 30px;
    height: 30px;
    background: list.nth($colors , 1);
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    box-shadow: 0 0 20px list.nth($colors , 1), 0 0 50px list.nth($colors , 1);
  }
  &--orbit {
    position: absolute; /* Change to absolute */
    top: 20%; /* Center the orbit */
    left: 0%; /* Center the orbit */
    translate: -50%, -50%; /* Center it perfectly */
    border-radius: 50%; /* Keep the elliptical shape */
    transform-style: preserve-3d;
    animation: rotate 3s linear infinite;

    &--electron {
      width: 15px;
      height: 15px;
      border-radius: 50%;
      position: absolute;
      top: 0;
      left: 50%;
      transform: translate(-50%, -50%);
      box-shadow: 0 0 10px cyan, 0 0 30px cyan;
    }
  }
  .orbit1 {
    width: 200px; /* Major axis */
    height: 120px; /* Minor axis */
    transform: translate(-50%, -50%) rotateX(45deg); /* Combine centering and rotation */
    border: 1px solid color.scale(cyan, $alpha: -70%);
    box-shadow: 0 0 16px color.scale(cyan, $alpha: -70%), 0 0 1px cyan;
  }
  .orbit2 {
    width: 200px;
    height: 120px;
    transform: translate(-50%, -50%) rotateX(-45deg);
    animation-duration: 5s;
    border: 1px solid color.scale($limeGreen, $alpha: -70%);
    box-shadow: 0 0 16px color.scale($limeGreen, $alpha: -70%),  0 0 1px $limeGreen;
  }
  .orbit3 {
    width: 200px;
    height: 120px;
    transform: translate(-50%, -50%) rotateY(90deg);
    box-shadow: 0 0 16px color.scale($vueGreen, $alpha: -70%);
    border: 1px solid color.scale($vueGreen, $alpha: -70%), 0 0 1px $vueGreen;
    animation-duration: 10s;
  }
  .electron1 { background: cyan }
  .electron2 { background: $limeGreen }
  .electron3 { background: $vueGreen }

  @keyframes rotate {
    0% { transform: rotate(0deg) }
    100% { transform: rotate(360deg) }
  }
}









